{
  "metainfo" : {
    "migrationVersions" : {
      "gemBuilderVersion" : "v1"
    },
    "codeGenConfiguration" : {
      "editableConfig" : false,
      "plibVersion" : {
        "mavenVersion" : "7.1.83",
        "pyPiVersion" : "1.8.13"
      }
    },
    "id" : "1",
    "uri" : "pipelines/gold_sales",
    "language" : "python",
    "fabricId" : "1571",
    "frontEndLanguage" : "sql",
    "mode" : "batch",
    "udfs" : {
      "language" : "python",
      "udfs" : [ ],
      "functionPackageName" : "scott_demo2_team.helloworld.functions",
      "sharedFunctionPackageNames" : [ "prophecy.spark_basic.functions", "prophecy.warehouse.functions" ]
    },
    "udafs" : {
      "language" : "python",
      "code" : ""
    },
    "configuration" : {
      "common" : {
        "type" : "record",
        "fields" : [ ]
      },
      "oldCommon" : {
        "type" : "record",
        "fields" : [ ]
      },
      "fabrics" : { },
      "instances" : { },
      "selected" : "default",
      "nonEditable" : [ ],
      "isSubscribedPipelineWithPipelineConfigs" : false
    },
    "sparkConf" : [ ],
    "hadoopConf" : [ ],
    "codeMode" : "sparse",
    "buildSystem" : "maven",
    "externalDependencies" : [ ],
    "dependentProjectExternalDependencies" : [ {
      "projectUID" : "12654",
      "projectName" : "ProphecySparkBasicsPython",
      "externalDependencies" : [ ]
    }, {
      "projectUID" : "12655",
      "projectName" : "ProphecyWarehousePython",
      "externalDependencies" : [ ]
    } ],
    "isImported" : false,
    "interimMode" : "Full",
    "interimModeEnabled" : true,
    "visualCodeInterimMode" : "Disabled",
    "recordsLimit" : {
      "enabled" : false,
      "value" : 1000
    },
    "topLevelPackage" : "gold_sales",
    "configurationVersion" : "v2"
  },
  "connections" : [ {
    "id" : "EUWSMCykGr0vL9vo9zZuQ",
    "source" : "rxaIaQR5qtYVLzRCX6G2p$$4RQ1lPzoJ4iTYxjh4cFqW",
    "sourcePort" : "0IXqpqy1nhHR5pL5duLgX$$jSWzscyIu532qFaZj_pD4",
    "target" : "tzys2o6Nv0OTQ9dD5uu_4$$l-Vfpcct6dzpSxKM9nLZL",
    "targetPort" : "P2VIaP0u1Ae5oSohEwgHL$$MiiW_boN0cQv80fTjZ9hj"
  }, {
    "id" : "nNHEaRUNy89SnxMMm0u6e$$-mznfAvOIBQViCaGDLFr5",
    "source" : "L5pc-eqdwtyTELkfSP_Db$$m6L2oF5lTnjYGBbTHzBIB",
    "sourcePort" : "ulT2FJ2Fug1Okqy-6vwmE$$CbMe6Hp9gNJrv8FI3igxG",
    "target" : "CCdS0rXltkp7g_udaQXQ4$$bj3i7a-ojc2Tti2iN53pU",
    "targetPort" : "3ulCjlNOkS_alOfJhq6QI$$-Ox7j5FrMFazxlAQk04-m"
  }, {
    "id" : "_oRhzHxv1oipxqEsFPk-K$$j2w9MgCXxOTIpMQtLaRg7",
    "source" : "CCdS0rXltkp7g_udaQXQ4$$bj3i7a-ojc2Tti2iN53pU",
    "sourcePort" : "oQeYRAZFurCHPn5NOSKd8$$hwd9qy4uEmFJmeSv3HocX",
    "target" : "fsJ_9X3CSLgpP8S3tpnjV$$zz_aD5JeoVF9Qo-b-MqZk",
    "targetPort" : "_dKalijg_HvoC2Z7qqKIo$$Dya-jEIbEbPX7EPjObOJa"
  }, {
    "id" : "m1JWOjrHzMX9k2MM0YCbB",
    "source" : "CUJmg8TC4ow2LTpkD4xTa$$_i5qUVFTMza3uMVRSyEls",
    "sourcePort" : "WRBU6jOW2-28Bu_9zVFew$$scVkcloeH0qrUHtfeM_Yz",
    "target" : "cmeh9U8XFq8QHeFmwUzw7$$7q6DXJxXUZsDqRK7-C5kX",
    "targetPort" : "7Sl1POjLs_iThUKfZHrKm$$YnFjYVPWqnHtkKkI5URlN"
  }, {
    "id" : "ZTqTpmJcpj9ZbXTU1xXja",
    "source" : "cmeh9U8XFq8QHeFmwUzw7$$7q6DXJxXUZsDqRK7-C5kX",
    "sourcePort" : "MXo6JurnoN6flZNUaHptp$$x5n4R4vwDuL52LdvCVnzS",
    "target" : "L5pc-eqdwtyTELkfSP_Db$$m6L2oF5lTnjYGBbTHzBIB",
    "targetPort" : "97RXLmrAv6ye9XZENUZEq$$9VT2PijShjMNNlvt-3uOx"
  }, {
    "id" : "Ptqw_mJcKvbp90IglevXQ",
    "source" : "cmeh9U8XFq8QHeFmwUzw7$$7q6DXJxXUZsDqRK7-C5kX",
    "sourcePort" : "MXo6JurnoN6flZNUaHptp$$x5n4R4vwDuL52LdvCVnzS",
    "target" : "rxaIaQR5qtYVLzRCX6G2p$$4RQ1lPzoJ4iTYxjh4cFqW",
    "targetPort" : "p2jAQt4FQ95GTpHzIrNZx$$s0hnqBRZkl_fO5l7h837X"
  } ],
  "processes" : {
    "cmeh9U8XFq8QHeFmwUzw7$$7q6DXJxXUZsDqRK7-C5kX" : {
      "id" : "cmeh9U8XFq8QHeFmwUzw7$$7q6DXJxXUZsDqRK7-C5kX",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Cleanup",
        "slug" : "Cleanup",
        "x" : 620,
        "y" : 500,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false,
        "comment" : "This gem calculates the age of the customer's account at the time of each order by subtracting the order date from the account open date. It also selects relevant fields such as order ID, customer ID, amount, order date, zipcode, and account flags for further analysis and reporting."
      },
      "ports" : {
        "inputs" : [ {
          "id" : "7Sl1POjLs_iThUKfZHrKm$$YnFjYVPWqnHtkKkI5URlN",
          "slug" : "in0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "order_id",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "order_date",
              "type" : "date",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "amount",
              "type" : "float",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "customer_id",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "account_open_date",
              "type" : "date",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "first_name",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "Customer first name",
                "mappings" : [ ],
                "tags" : [ {
                  "type" : "user",
                  "name" : "pii"
                } ]
              }
            }, {
              "name" : "last_name",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "Customer last name",
                "mappings" : [ ],
                "tags" : [ {
                  "type" : "user",
                  "name" : "pii"
                } ]
              }
            }, {
              "name" : "zipcode",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "account_flags",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "Customer account flags",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "MXo6JurnoN6flZNUaHptp$$x5n4R4vwDuL52LdvCVnzS",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "importLanguage" : "python",
        "expressions" : [ {
          "target" : "account_age_at_order_date",
          "expression" : {
            "format" : "sql",
            "expression" : "datediff(account_open_date, order_date)"
          },
          "description" : ""
        }, {
          "target" : "order_id",
          "expression" : {
            "format" : "sql",
            "expression" : "order_id"
          },
          "description" : ""
        }, {
          "target" : "customer_id",
          "expression" : {
            "format" : "sql",
            "expression" : "customer_id"
          },
          "description" : ""
        }, {
          "target" : "amount",
          "expression" : {
            "format" : "sql",
            "expression" : "amount"
          },
          "description" : ""
        }, {
          "target" : "order_date",
          "expression" : {
            "format" : "sql",
            "expression" : "order_date"
          },
          "description" : ""
        }, {
          "target" : "zipcode",
          "expression" : {
            "format" : "sql",
            "expression" : "zipcode"
          },
          "description" : ""
        }, {
          "target" : "account_flags",
          "expression" : {
            "format" : "sql",
            "expression" : "account_flags"
          },
          "description" : ""
        } ],
        "importString" : "",
        "activeTab" : "expressions",
        "columnsSelector" : [ "7Sl1POjLs_iThUKfZHrKm$$YnFjYVPWqnHtkKkI5URlN##order_date", "7Sl1POjLs_iThUKfZHrKm$$YnFjYVPWqnHtkKkI5URlN##zipcode", "7Sl1POjLs_iThUKfZHrKm$$YnFjYVPWqnHtkKkI5URlN##amount", "7Sl1POjLs_iThUKfZHrKm$$YnFjYVPWqnHtkKkI5URlN##account_flags", "7Sl1POjLs_iThUKfZHrKm$$YnFjYVPWqnHtkKkI5URlN##customer_id", "7Sl1POjLs_iThUKfZHrKm$$YnFjYVPWqnHtkKkI5URlN##account_open_date", "7Sl1POjLs_iThUKfZHrKm$$YnFjYVPWqnHtkKkI5URlN##order_id" ]
      },
      "componentInfo" : {
        "gemId" : "gitUri=http://gitserver:3000/DxEheDCJ_team_5751/DxEheDCJ_project_12654.git&subPath=&tag=0.0.4&projectSubscriptionProjectId=12654&path=gems/Reformat",
        "projectName" : "ProphecySparkBasicsPython"
      }
    },
    "fsJ_9X3CSLgpP8S3tpnjV$$zz_aD5JeoVF9Qo-b-MqZk" : {
      "id" : "fsJ_9X3CSLgpP8S3tpnjV$$zz_aD5JeoVF9Qo-b-MqZk",
      "component" : "Target",
      "metadata" : {
        "label" : "gold_sales_by_zip_date",
        "slug" : "gold_sales_by_zip_date",
        "x" : 1240,
        "y" : 320,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false,
        "comment" : "This gem updates or inserts data into a Delta table named `gold_sales_by_zip_date` based on the `zipcode` and `order_date` columns. If the table already exists, it performs an update on matching records and inserts new records if there are no matches. If the table does not exist, it creates a new Delta table and saves the input data to it."
      },
      "ports" : {
        "inputs" : [ {
          "id" : "_dKalijg_HvoC2Z7qqKIo$$Dya-jEIbEbPX7EPjObOJa",
          "slug" : "in0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "zipcode",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "order_date",
              "type" : "date",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "total_amount",
              "type" : "double",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "avg_amount",
              "type" : "double",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "order_count",
              "type" : "long",
              "nullable" : false,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "datasetId" : "datasets/gold_sales_by_zip_date"
      }
    },
    "tzys2o6Nv0OTQ9dD5uu_4$$l-Vfpcct6dzpSxKM9nLZL" : {
      "id" : "tzys2o6Nv0OTQ9dD5uu_4$$l-Vfpcct6dzpSxKM9nLZL",
      "component" : "Target",
      "metadata" : {
        "label" : "gold_total_sales_by_customer",
        "slug" : "gold_total_sales_by_customer",
        "x" : 1240,
        "y" : 500,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false,
        "comment" : "This gem updates or inserts data into a Delta table named \"gold_total_sales_by_customer\" based on the customer_id identifier. If the table already exists, it performs an update on the matching records and inserts new records if there are no matches. If the table does not exist, it creates a new table and saves the data in Delta format. This could be useful for maintaining a real-time view of customer sales data for analysis and reporting."
      },
      "ports" : {
        "inputs" : [ {
          "id" : "P2VIaP0u1Ae5oSohEwgHL$$MiiW_boN0cQv80fTjZ9hj",
          "slug" : "in0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "customer_id",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "orders",
              "type" : "long",
              "nullable" : false,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "total_spend",
              "type" : "double",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "datasetId" : "datasets/gold_total_sales_by_customer"
      }
    },
    "rxaIaQR5qtYVLzRCX6G2p$$4RQ1lPzoJ4iTYxjh4cFqW" : {
      "id" : "rxaIaQR5qtYVLzRCX6G2p$$4RQ1lPzoJ4iTYxjh4cFqW",
      "component" : "Aggregate",
      "metadata" : {
        "label" : "SumAmounts",
        "slug" : "SumAmounts",
        "x" : 1040,
        "y" : 500,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false,
        "comment" : "This gem groups payment data by customer and calculates the total number of orders and the total amount spent by each customer. This information can be used to identify high-value customers, understand customer spending patterns, and personalize customer engagement."
      },
      "ports" : {
        "inputs" : [ {
          "id" : "p2jAQt4FQ95GTpHzIrNZx$$s0hnqBRZkl_fO5l7h837X",
          "slug" : "in0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "account_age_at_order_date",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "order_id",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "customer_id",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "amount",
              "type" : "float",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "order_date",
              "type" : "date",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "zipcode",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "account_flags",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "Customer account flags",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "0IXqpqy1nhHR5pL5duLgX$$jSWzscyIu532qFaZj_pD4",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "allIns" : false,
        "doPivot" : false,
        "aggregate" : [ {
          "target" : "orders",
          "expression" : {
            "format" : "sql",
            "expression" : "count(order_id)"
          },
          "description" : "",
          "_row_id" : null
        }, {
          "target" : "total_spend",
          "expression" : {
            "format" : "sql",
            "expression" : "sum(amount)"
          },
          "description" : "",
          "_row_id" : null
        } ],
        "allowSelection" : true,
        "pivotColumn" : null,
        "pivotValues" : [ ],
        "activeTab" : "aggregate",
        "columnsSelector" : [ "p2jAQt4FQ95GTpHzIrNZx$$s0hnqBRZkl_fO5l7h837X##amount", "p2jAQt4FQ95GTpHzIrNZx$$s0hnqBRZkl_fO5l7h837X##customer_id", "p2jAQt4FQ95GTpHzIrNZx$$s0hnqBRZkl_fO5l7h837X##order_id" ],
        "groupBy" : [ {
          "target" : "customer_id",
          "expression" : {
            "format" : "sql",
            "expression" : "customer_id"
          },
          "description" : "",
          "_row_id" : null
        } ]
      },
      "componentInfo" : {
        "gemId" : "gitUri=http://gitserver:3000/DxEheDCJ_team_5751/DxEheDCJ_project_12654.git&subPath=&tag=0.0.4&projectSubscriptionProjectId=12654&path=gems/Aggregate",
        "projectName" : "ProphecySparkBasicsPython"
      }
    },
    "L5pc-eqdwtyTELkfSP_Db$$m6L2oF5lTnjYGBbTHzBIB" : {
      "id" : "L5pc-eqdwtyTELkfSP_Db$$m6L2oF5lTnjYGBbTHzBIB",
      "component" : "Aggregate",
      "metadata" : {
        "label" : "TotalByZipCodeAndDate",
        "slug" : "TotalByZipCodeAndDate",
        "x" : 860,
        "y" : 320,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false,
        "comment" : "This gem aggregates payment data by zip code and order date. For each zip code and date combination, it calculates the total amount paid, average amount paid, and number of orders. This provides insights into regional spending patterns and can help businesses tailor their marketing and promotional efforts to specific areas and time periods."
      },
      "ports" : {
        "inputs" : [ {
          "id" : "97RXLmrAv6ye9XZENUZEq$$9VT2PijShjMNNlvt-3uOx",
          "slug" : "in0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "account_age_at_order_date",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "order_id",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "customer_id",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "amount",
              "type" : "float",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "order_date",
              "type" : "date",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "zipcode",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "account_flags",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "Customer account flags",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "ulT2FJ2Fug1Okqy-6vwmE$$CbMe6Hp9gNJrv8FI3igxG",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "allIns" : false,
        "doPivot" : false,
        "aggregate" : [ {
          "target" : "total_amount",
          "expression" : {
            "format" : "sql",
            "expression" : "sum(amount)"
          },
          "description" : "",
          "_row_id" : null
        }, {
          "target" : "avg_amount",
          "expression" : {
            "format" : "sql",
            "expression" : "avg(amount)"
          },
          "description" : "",
          "_row_id" : "c_1508"
        }, {
          "target" : "order_count",
          "expression" : {
            "format" : "sql",
            "expression" : "count(order_id)"
          },
          "description" : "",
          "_row_id" : "c_1555"
        } ],
        "allowSelection" : true,
        "pivotColumn" : null,
        "pivotValues" : [ ],
        "activeTab" : "groupBy",
        "columnsSelector" : [ "97RXLmrAv6ye9XZENUZEq$$9VT2PijShjMNNlvt-3uOx##order_id", "97RXLmrAv6ye9XZENUZEq$$9VT2PijShjMNNlvt-3uOx##order_date", "97RXLmrAv6ye9XZENUZEq$$9VT2PijShjMNNlvt-3uOx##amount", "97RXLmrAv6ye9XZENUZEq$$9VT2PijShjMNNlvt-3uOx##zipcode" ],
        "groupBy" : [ {
          "target" : "zipcode",
          "expression" : {
            "format" : "sql",
            "expression" : "zipcode"
          },
          "description" : "",
          "_row_id" : null
        }, {
          "target" : "order_date",
          "expression" : {
            "format" : "sql",
            "expression" : "order_date"
          },
          "description" : "",
          "_row_id" : null
        } ]
      },
      "componentInfo" : {
        "gemId" : "gitUri=http://gitserver:3000/DxEheDCJ_team_5751/DxEheDCJ_project_12654.git&subPath=&tag=0.0.4&projectSubscriptionProjectId=12654&path=gems/Aggregate",
        "projectName" : "ProphecySparkBasicsPython"
      }
    },
    "CCdS0rXltkp7g_udaQXQ4$$bj3i7a-ojc2Tti2iN53pU" : {
      "id" : "CCdS0rXltkp7g_udaQXQ4$$bj3i7a-ojc2Tti2iN53pU",
      "component" : "OrderBy",
      "metadata" : {
        "label" : "SortByDateAndZip",
        "slug" : "SortByDateAndZip",
        "x" : 1040,
        "y" : 320,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false,
        "comment" : "This gem sorts payment data by order date and zip code in ascending order. This could be useful for analyzing regional trends and identifying patterns in customer behaviour based on location and time."
      },
      "ports" : {
        "inputs" : [ {
          "id" : "3ulCjlNOkS_alOfJhq6QI$$-Ox7j5FrMFazxlAQk04-m",
          "slug" : "in0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "zipcode",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "order_date",
              "type" : "date",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "total_amount",
              "type" : "double",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "avg_amount",
              "type" : "double",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "order_count",
              "type" : "long",
              "nullable" : false,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "oQeYRAZFurCHPn5NOSKd8$$hwd9qy4uEmFJmeSv3HocX",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "columnsSelector" : [ "3ulCjlNOkS_alOfJhq6QI$$-Ox7j5FrMFazxlAQk04-m##order_date", "3ulCjlNOkS_alOfJhq6QI$$-Ox7j5FrMFazxlAQk04-m##zipcode" ],
        "orders" : [ {
          "expression" : {
            "format" : "sql",
            "expression" : "order_date"
          },
          "sortType" : "asc"
        }, {
          "expression" : {
            "format" : "sql",
            "expression" : "zipcode"
          },
          "sortType" : "asc"
        } ]
      },
      "componentInfo" : {
        "gemId" : "gitUri=http://gitserver:3000/DxEheDCJ_team_5751/DxEheDCJ_project_12654.git&subPath=&tag=0.0.4&projectSubscriptionProjectId=12654&path=gems/OrderBy",
        "projectName" : "ProphecySparkBasicsPython"
      }
    },
    "CUJmg8TC4ow2LTpkD4xTa$$_i5qUVFTMza3uMVRSyEls" : {
      "id" : "CUJmg8TC4ow2LTpkD4xTa$$_i5qUVFTMza3uMVRSyEls",
      "component" : "Source",
      "metadata" : {
        "label" : "silver_order_customer_details",
        "slug" : "silver_order_customer_details",
        "x" : 460,
        "y" : 500,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false,
        "comment" : "This gem reads data from a table named 'silver_order_customer_details' in the 'scottdemo' database. This could be used to access and analyze customer and order data stored in the table."
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "WRBU6jOW2-28Bu_9zVFew$$scVkcloeH0qrUHtfeM_Yz",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "datasetId" : "datasets/silver_order_customer_details"
      }
    }
  },
  "ports" : {
    "inputs" : [ ],
    "outputs" : [ ],
    "selectedInputFields" : [ ],
    "isCustomOutputSchema" : false,
    "autoUpdateOnRun" : false
  }
}